plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport // Genera el informe despu√©s de ejecutar los tests
}

jacocoTestReport {
	dependsOn test // Ejecuta los tests antes de generar el informe
	reports {
		xml.required.set(true)  // Reemplaza `enabled = true`
		html.required.set(true) // Reemplaza `enabled = true`
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.mapstruct:mapstruct:1.6.0'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.0'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile) {
	options.annotationProcessorPath = configurations.annotationProcessor
}

tasks.named('test') {
	useJUnitPlatform()
}
